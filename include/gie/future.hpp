//================================================================================================================================================
// FILE: future.h
// (c) GIE 2017-08-05  14:31
//
//================================================================================================================================================
#ifndef H_GUARD_FUTURE_2017_08_05_14_31
#define H_GUARD_FUTURE_2017_08_05_14_31
//================================================================================================================================================
#pragma once
//================================================================================================================================================
#include <type_traits>
#include <exception>
#include <future>
//================================================================================================================================================
namespace gie {

    template <typename T, typename Fun>
    void fulfill_promise(std::promise<T>& promise, Fun&& fun) {
        using ResultT = typename std::invoke_result<Fun>::type;

        try {

            if constexpr ( std::is_same_v<ResultT, void> ) {
                fun();
                promise.set_value();
            } else {
                promise.set_value(fun());
            }

        } catch (...) {
            promise.set_exception(std::current_exception());
        }
    };
}
//================================================================================================================================================
#endif
//================================================================================================================================================
